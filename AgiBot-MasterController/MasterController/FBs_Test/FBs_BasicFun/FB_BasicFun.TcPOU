<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_BasicFun" Id="{95fd4a26-4bf1-42f2-b88c-db9ec90fa8fe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BasicFun
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[


]]></ST>
    </Implementation>
    <Method Name="activeJnt2DH" Id="{0fdb3d65-fc06-41e4-8dca-68c34215bd8a}">
      <Declaration><![CDATA[METHOD activeJnt2DH : BOOL
VAR_INPUT
	i_activeJntPos:Vec7d;
END_VAR

VAR_OUTPUT
	o_DHJntPos:Vec7d;
END_VAR

VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
o_DHJntPos:=i_activeJntPos;
o_DHJntPos[3]:=i_activeJntPos[3]-i_activeJntPos[2]; //q8 = q3+q2-----q3=q8-q2
o_DHJntPos[4]:=i_activeJntPos[4]+i_activeJntPos[3]-i_activeJntPos[2]-pi/2; //q4DH=q4motor+q8-q2-90; ----q4motor=q4DH+q2-q8+90
]]></ST>
      </Implementation>
    </Method>
    <Method Name="armFK" Id="{eb34cec9-c1b5-4340-b7a7-1a5b5e58eab3}">
      <Declaration><![CDATA[// from active joint position to cartesian pose in arm origin
//METHOD PROTECTED forwardKinematic : BOOL
METHOD PUBLIC armFK : BOOL
VAR_IN_OUT CONSTANT
	i_jntPos :ARRAY[1..g_mJntNum] OF LREAL;
	i_gripperRollFlip:BOOL;
END_VAR
VAR_IN_OUT
	r_cartPose :ST_Frame;
END_VAR
VAR
	q1,q2, q3, q4, q5, q6, q7 :LREAL;
	d1,d4,a3,a4 :LREAL;
	c1,c2,c3,c4,c5,c6,c7 :LREAL;
	s1,s2,s3,s4,s5,s6,s7 :LREAL;
	c23, s23 :LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// !Convert active joint position to DH model for kinematic calculation
q1:=i_jntPos[1];  
q2:=i_jntPos[2];  
q3:=i_jntPos[3]-i_jntPos[2];  //q3=q8-q2
q4:=jnt4MotorToLink(i_jntPos[2],i_jntPos[3], i_jntPos[4]);//q4DH=q4motor+q8-q2-90;  
q5:=i_jntPos[5];
q6:=i_jntPos[6];
q7:=i_jntPos[7];

// master roll flip handle
IF (i_gripperRollFlip=TRUE) THEN
	q7 := q7+PI;
END_IF

d1:=g_d1;
d4:=g_d4;
a3:=g_a3;
a4:=g_a4;
c1:=COS(q1);
c2:=COS(q2);
c3:=COS(q3);
c4:=COS(q4);
c5:=COS(q5);
c6:=COS(q6);
c7:=COS(q7);
s1:=SIN(q1);
s2:=SIN(q2);
s3:=SIN(q3);
s4:=SIN(q4);
s5:=SIN(q5);
s6:=SIN(q6);
s7:=SIN(q7);
c23:=COS(q2+q3);
s23:=SIN(q2+q3);

// cartesian pose frame
r_cartPose.m_pos[1]:=c1*(a4*c23 - d4*s23 + a3*c2); 
r_cartPose.m_pos[2]:=s1*(a4*c23 - d4*s23 + a3*c2);
r_cartPose.m_pos[3]:=d1 - d4*c23 - a4*s23 - a3*s2;  
r_cartPose.m_rot[1,1]:=c7*(s6*(c4*s1 - s4*(c1*c2*c3 - c1*s2*s3)) + c6*(c5*(s1*s4 + c4*(c1*c2*c3 - c1*s2*s3)) - s5*(c1*c2*s3 + c1*c3*s2))) - s7*(s5*(s1*s4 + c4*(c1*c2*c3 - c1*s2*s3)) + c5*(c1*c2*s3 + c1*c3*s2));
r_cartPose.m_rot[2,1]:=s7*(s5*(c1*s4 + c4*(s1*s2*s3 - c2*c3*s1)) - c5*(c2*s1*s3 + c3*s1*s2)) - c7*(s6*(c1*c4 - s4*(s1*s2*s3 - c2*c3*s1)) + c6*(c5*(c1*s4 + c4*(s1*s2*s3 - c2*c3*s1)) + s5*(c2*s1*s3 + c3*s1*s2)));
r_cartPose.m_rot[3,1]:=- s7*(c23*c5 - s23*c4*s5) - c7*(c23*c6*s5 - s23*s4*s6 + s23*c4*c5*c6); 
r_cartPose.m_rot[1,2]:=- s7*(s6*(c4*s1 - s4*(c1*c2*c3 - c1*s2*s3)) + c6*(c5*(s1*s4 + c4*(c1*c2*c3 - c1*s2*s3)) - s5*(c1*c2*s3 + c1*c3*s2))) - c7*(s5*(s1*s4 + c4*(c1*c2*c3 - c1*s2*s3)) + c5*(c1*c2*s3 + c1*c3*s2)); 
r_cartPose.m_rot[2,2]:=s7*(s6*(c1*c4 - s4*(s1*s2*s3 - c2*c3*s1)) + c6*(c5*(c1*s4 + c4*(s1*s2*s3 - c2*c3*s1)) + s5*(c2*s1*s3 + c3*s1*s2))) + c7*(s5*(c1*s4 + c4*(s1*s2*s3 - c2*c3*s1)) - c5*(c2*s1*s3 + c3*s1*s2)); 
r_cartPose.m_rot[3,2]:=s7*(c23*c6*s5 - s23*s4*s6 + s23*c4*c5*c6) - c7*(c23*c5 - s23*c4*s5); 
r_cartPose.m_rot[1,3]:=s6*(c5*(s1*s4 + c4*(c1*c2*c3 - c1*s2*s3)) - s5*(c1*c2*s3 + c1*c3*s2)) - c6*(c4*s1 - s4*(c1*c2*c3 - c1*s2*s3)); 
r_cartPose.m_rot[2,3]:=c6*(c1*c4 - s4*(s1*s2*s3 - c2*c3*s1)) - s6*(c5*(c1*s4 + c4*(s1*s2*s3 - c2*c3*s1)) + s5*(c2*s1*s3 + c3*s1*s2));
r_cartPose.m_rot[3,3]:=- s6*(c23*s5 + s23*c4*c5) - s23*c6*s4;]]></ST>
      </Implementation>
    </Method>
    <Method Name="armIK" Id="{00b556e8-e3a2-43da-a868-52dd6a2caab9}">
      <Declaration><![CDATA[// from cartesian pose in arm origin to active joint position
//METHOD PROTECTED inverseKinematic : BOOL
METHOD armIK : BOOL
VAR_INPUT
	q4:LREAL; //q4DH
	solution_ID:INT; //solution ID
END_VAR
VAR_IN_OUT CONSTANT
	i_curCartPose :ST_Frame;
END_VAR
VAR_IN_OUT
	r_jntPos :ARRAY[1..g_mJntNum] OF LREAL;
END_VAR
VAR
	a3,a4,d1,d4:LREAL;
	px,py,pz:lreal;
	nx,ny,nz:lreal;
	ox,oy,oz:lreal;
	ax,ay,az:lreal;

	q1,q2,q3,q5,q6,q7:LREAL;
	
	q11,q12:LREAL;
	k1,A,B,C,fi,R0,q21,q22:lreal;
	ins1,ins2:lreal;
	
	A11,A12,A21,A22,C1,C2:lreal;
	SIN23,COS23,q23:LREAL;
	
	T_74_left_23,q61,q62:lreal;
	T_74_left_13,T_74_left_33:lreal;
	T_74_left_21,T_74_left_22:LREAL;	
	succeed_1,succeed_2,succeed:BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

//***********************单臂逆向运动学**************************//
d1:=g_d1;
d4:=g_d4;
a3:=g_a3;
a4:=g_a4;

nx:=i_curCartPose.m_rot[1,1];  ny:=i_curCartPose.m_rot[2,1];  nz:=i_curCartPose.m_rot[3,1];
ox:=i_curCartPose.m_rot[1,2]; oy:=i_curCartPose.m_rot[2,2];  oz:=i_curCartPose.m_rot[3,2];
ax:=i_curCartPose.m_rot[1,3];  ay:=i_curCartPose.m_rot[2,3];  az:=i_curCartPose.m_rot[3,3];
px:=i_curCartPose.m_pos[1]; py:=i_curCartPose.m_pos[2]; pz:=i_curCartPose.m_pos[3];


//求解q1
q11:=atan2(y:= py, x:= px);
q12:=atan2(y:= -py, x:= -px);
IF (Solution_ID<=4) THEN
	q1:=q11;
ELSE
	q1:=q12;
END_IF



//求解q2
k1:=px*COS(q1) + py*SIN(q1);
A:=2*a3*pz - 2*a3*d1;
B:=2*a3*k1;
C:=a3*a3 - a4*a4 + d1*d1 - 2*d1*pz - d4*d4 + k1*k1 + pz*pz;
fi:=atan2(y:= B, x:= A);
R0:=SQRT(A*A+B*B);


//*************程序保护性处理，避免软件崩溃***************//
IF ABS(C/R0)>1 THEN
	succeed_1:=FALSE;
	succeed:=FALSE;
	armIK:=FALSE;
	RETURN;
ELSE
	succeed_1:=TRUE;
END_IF

ins1:=atan2(y:= C/R0, x:= SQRT(1-(C/R0)*(C/R0)));
q21:=fi-ins1;
ins2:=atan2(y:= C/R0, x:= -SQRT(1-(C/R0)*(C/R0)));
q22:=fi-ins2;

IF (Solution_ID=1) OR (Solution_ID=2) OR (Solution_ID=5) OR (Solution_ID=6) THEN
	q2:=q21;
ELSE
	q2:=q22;
END_IF




//求解q3
A11:=- d4;
A12:=a4;
A21:=- a4;
A22:=-d4;
C1:=k1- a3*COS(q2);
C2:=pz - d1 + a3*SIN(q2);
sin23:=(C1*A22-C2*A12)/(A11*A22-A21*A12);
cos23:=(C2*A11-C1*A21)/(A11*A22-A21*A12);
q23:=atan2(y:= sin23, x:= cos23);
q3:=q23-q2;




//求解q6
T_74_left_23:=ax*(COS(q4)*SIN(q1) - COS(q1)*COS(q2)*COS(q3)*SIN(q4) + COS(q1)*SIN(q2)*SIN(q3)*SIN(q4)) - ay*(COS(q1)*COS(q4) + COS(q2)*COS(q3)*SIN(q1)*SIN(q4) - SIN(q1)*SIN(q2)*SIN(q3)*SIN(q4)) + az*SIN(q2 + q3)*SIN(q4);

//*************程序保护性处理，避免软件崩溃***************//
IF ABS(T_74_left_23>1) THEN
	succeed_2:=FALSE;
	succeed:=FALSE;
	armIK:=FALSE;
	RETURN;
ELSE
	succeed_2:=TRUE;
END_IF

q61:=ACOS(-T_74_left_23);
q62:=-ACOS(-T_74_left_23);
IF (Solution_ID=1) OR (Solution_ID=3) OR (Solution_ID=5) OR (Solution_ID=7) THEN
	q6:=q61;
ELSE
	q6:=q62;
END_IF



//求解q5
T_74_left_13:=ax*(SIN(q1)*SIN(q4) + COS(q1)*COS(q2)*COS(q3)*COS(q4) - COS(q1)*COS(q4)*SIN(q2)*SIN(q3)) - ay*(COS(q1)*SIN(q4) - COS(q2)*COS(q3)*COS(q4)*SIN(q1) + COS(q4)*SIN(q1)*SIN(q2)*SIN(q3)) - az*SIN(q2 + q3)*COS(q4);
T_74_left_33:=- az*COS(q2 + q3) - ax*SIN(q2 + q3)*COS(q1) - ay*SIN(q2 + q3)*SIN(q1);
q5:=atan2(y:= T_74_left_33*SIN(q6), x:= T_74_left_13*SIN(q6));



//求解q7
T_74_left_21:=nx*(COS(q4)*SIN(q1) - COS(q1)*COS(q2)*COS(q3)*SIN(q4) + COS(q1)*SIN(q2)*SIN(q3)*SIN(q4)) - ny*(COS(q1)*COS(q4) + COS(q2)*COS(q3)*SIN(q1)*SIN(q4) - SIN(q1)*SIN(q2)*SIN(q3)*SIN(q4)) + nz*SIN(q2 + q3)*SIN(q4);
T_74_left_22:=ox*(COS(q4)*SIN(q1) - COS(q1)*COS(q2)*COS(q3)*SIN(q4) + COS(q1)*SIN(q2)*SIN(q3)*SIN(q4)) - oy*(COS(q1)*COS(q4) + COS(q2)*COS(q3)*SIN(q1)*SIN(q4) - SIN(q1)*SIN(q2)*SIN(q3)*SIN(q4)) + oz*SIN(q2 + q3)*SIN(q4);
q7:=atan2(y:= -T_74_left_22*SIN(q6), x:= T_74_left_21*SIN(q6));



//output DH joint position
r_jntPos[1]:=q1;
r_jntPos[2]:=q2;
r_jntPos[3]:=q3;
r_jntPos[4]:=q4;
r_jntPos[5]:=q5;
r_jntPos[6]:=q6;
r_jntPos[7]:=q7;

succeed:=TRUE;
armIK:=succeed;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="DH2activeJnt" Id="{90fd963f-be87-422e-9d10-98c0e51d56e0}">
      <Declaration><![CDATA[METHOD DH2activeJnt : BOOL
VAR_INPUT
	i_DHJntPos:Vec7d;
END_VAR
VAR_OUTPUT
	o_activeJntPos:Vec7d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
o_activeJntPos:=i_DHJntPos;
o_activeJntPos[3]:=i_DHJntPos[3]+i_DHJntPos[2]; //  q8 = q3+q2
o_activeJntPos[4]:=i_DHJntPos[4]+i_DHJntPos[2]-o_activeJntPos[3]+pi/2; //q4DH=q4motor+q8-q2-90; ----q4motor=q4DH+q2-q8+90
]]></ST>
      </Implementation>
    </Method>
    <Method Name="jnt4MotorToLink" Id="{03eebf10-39ef-4fb2-951f-cd0c78680d11}">
      <Declaration><![CDATA[//convert joint4 position from motor side to link side
METHOD public jnt4MotorToLink : LREAL
VAR_INPUT
	i_q2 :LREAL;
	i_q3:LREAL;
	i_q4Motor :LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[jnt4MotorToLink:=i_q4Motor+i_q3-i_q2-pi/2;//q4DH=q4motor+q8-q2-90;  ]]></ST>
      </Implementation>
    </Method>
    <Method Name="minimumDistMot" Id="{a8268b9c-8369-41e2-bbe1-f4d2bbffd9d8}">
      <Declaration><![CDATA[METHOD minimumDistMot : BOOL
VAR_INPUT
	i_current:LREAL;
	i_target:LREAL;
END_VAR
VAR_OUTPUT
	o_target:LREAL;
END_VAR
VAR
	p1,p2,p3,p4:LREAL;
	d1,d2,d3:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
p1:=i_current;

p2:=i_target;            d1:=ABS(p2-p1);
p3:=i_target+2*pi;      d2:=ABS(p3-p1);
p4:=i_target-2*pi;       d3:=ABS(p4-p1);

IF (d1<d2 AND d1<d3) THEN
	o_target:=p2;
ELSIF (d2<d1 AND d2<d3) THEN
	o_target:=p3;
ELSE
	o_target:=p4;
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="rotX" Id="{aabdf6ff-50ee-4162-bbbd-5c95738a5720}">
      <Declaration><![CDATA[METHOD rotX : BOOL
VAR_INPUT
	i_angle:LREAL;
END_VAR

VAR_OUTPUT
	o_matrix:Mat3d;
END_VAR

VAR
	rot :Mat3d := g_eye3d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
rot[2,2]:=COS(i_angle);
rot[3,3]:=rot[2,2];
rot[3,2]:=SIN(i_angle);
rot[2,3]:=-rot[3,2];
o_matrix :=rot;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="rotY" Id="{07b60b61-ed8e-4084-a1b1-5a63187e922f}">
      <Declaration><![CDATA[METHOD rotY : BOOL
VAR_INPUT
	i_angle:LREAL;
END_VAR

VAR_OUTPUT
	o_matrix:Mat3d;
END_VAR

VAR
	rot :Mat3d := g_eye3d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
rot[1,1]:=COS(i_angle);
rot[3,3]:=rot[1,1];
rot[1,3]:=SIN(i_angle);
rot[3,1]:=-rot[1,3];
o_matrix :=rot;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="rotZ" Id="{a17dcff5-5994-4569-ad0e-c38422c55518}">
      <Declaration><![CDATA[METHOD rotZ : BOOL
VAR_INPUT
	i_angle:LREAL;
END_VAR

VAR_OUTPUT
	o_matrix:Mat3d;
END_VAR

VAR
	rot :Mat3d := g_eye3d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
rot[1,1]:=COS(i_angle);
rot[2,2]:=rot[1,1];
rot[2,1]:=SIN(i_angle);
rot[1,2]:=-rot[2,1];
o_matrix :=rot;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="rpy2rot" Id="{a6454ffb-7afd-49d1-9756-4c7f8a020ac8}">
      <Declaration><![CDATA[METHOD rpy2rot : BOOL
VAR_INPUT
	i_rpy:Vec3d;
END_VAR

VAR_OUTPUT
	o_rot:Mat3d;
END_VAR

VAR
	rot_x,rot_y,rot_z:LREAL;
	alpha,beta,gama:LREAL;
	matrix_out:ARRAY[1..3,1..3] OF LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
alpha:=rot_z;
beta:=rot_y;
gama:=rot_x;

matrix_out[1,1]:=COS(alpha)*COS(beta);
matrix_out[2,1]:=SIN(alpha)*COS(beta);
matrix_out[3,1]:=-SIN(beta);

matrix_out[1,2]:=COS(alpha)*SIN(beta)*SIN(gama)-SIN(alpha)*COS(gama);
matrix_out[2,2]:=SIN(alpha)*SIN(beta)*SIN(gama)+COS(alpha)*COS(gama);
matrix_out[3,2]:=COS(beta)*SIN(gama);

matrix_out[1,3]:=COS(alpha)*SIN(beta)*COS(gama)+SIN(alpha)*SIN(gama);
matrix_out[2,3]:=SIN(alpha)*SIN(beta)*COS(gama)-COS(alpha)*SIN(gama);
matrix_out[3,3]:=COS(beta)*COS(gama);

o_rot:=matrix_out;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="xyzrpy2Frame" Id="{d7e7ee54-5c02-43c5-a887-650d94647db7}">
      <Declaration><![CDATA[METHOD xyzrpy2Frame : BOOL
VAR_INPUT
	i_posVec:Vec6d;
END_VAR

VAR_OUTPUT
	o_frame:ST_Frame;
END_VAR

VAR
	i:INT;
	rpyVec:Vec3d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i:=1 TO 3 BY 1 DO
	o_frame.m_pos[i]:=i_posVec[i];
	rpyVec[i]:=i_posVec[i+3];
END_FOR
rpy2rot(i_rpy:= rpyVec, o_rot=> o_frame.m_rot) ;

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_BasicFun">
      <LineId Id="10" Count="2" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.activeJnt2DH">
      <LineId Id="23" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.armFK">
      <LineId Id="84" Count="3" />
      <LineId Id="163" Count="0" />
      <LineId Id="89" Count="2" />
      <LineId Id="180" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="181" Count="3" />
      <LineId Id="92" Count="24" />
      <LineId Id="140" Count="7" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.armIK">
      <LineId Id="13" Count="2" />
      <LineId Id="131" Count="2" />
      <LineId Id="19" Count="5" />
      <LineId Id="27" Count="18" />
      <LineId Id="47" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="239" Count="0" />
      <LineId Id="53" Count="40" />
      <LineId Id="240" Count="0" />
      <LineId Id="94" Count="11" />
      <LineId Id="199" Count="0" />
      <LineId Id="106" Count="5" />
      <LineId Id="200" Count="0" />
      <LineId Id="112" Count="6" />
      <LineId Id="202" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="119" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.DH2activeJnt">
      <LineId Id="26" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.jnt4MotorToLink">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.minimumDistMot">
      <LineId Id="6" Count="0" />
      <LineId Id="17" Count="13" />
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.rotX">
      <LineId Id="11" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="12" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.rotY">
      <LineId Id="11" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.rotZ">
      <LineId Id="11" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.rpy2rot">
      <LineId Id="7" Count="0" />
      <LineId Id="21" Count="7" />
      <LineId Id="30" Count="2" />
      <LineId Id="34" Count="3" />
      <LineId Id="39" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicFun.xyzrpy2Frame">
      <LineId Id="7" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>